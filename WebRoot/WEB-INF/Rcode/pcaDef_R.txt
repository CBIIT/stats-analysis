#################################################################################################

# File: Rembrandt_PCA.R

# Description: Write R module for higher order analysis tools - PCA

# Author: Huaitian Liu

# Date: August~September 2005

#################################################################################################

 

# --------------------------------------------------------------------------------------------

# Notes:

#1. This makes use of the PCA algorithm in the "mva" package of "R" (merged into "stats"). We use 

#   the prcomp as the preferred method.

#2. Generation of the detailed information about the PCA including an analysis file with more

#   details

#---------------------------------------------------------------------------------------------

 

# library(mva)

    library(stats)

 

# The input file contains the format as genes(rows) x samples(columns)

#    load("datmat.Rda")

#    datmat <- as.matrix(datmat) # input file

 

# Filtering option 2 - The variance of each gene over all samples was calculated and the top 30% 

pcaGeneFilter <- function(datmat, cons=0.90) {
    tmp1 <- apply(datmat, 1, var, na.rm=TRUE)
    tmp2 <- quantile(tmp1,cons)
    datmat2 <- datmat[tmp1>=tmp2,]
    return(datmat2)
}


# high variance genes selected for PCA

computePCA <- function(datmat, filterParam) {
   filteredDataMatrix <- pcaGeneFilter(datmat, 0.90)
   tmp <- apply(is.na(filteredDataMatrix),1,sum,na.rm=T)
   dpca <- prcomp(t(filteredDataMatrix[tmp==0,]))
}
