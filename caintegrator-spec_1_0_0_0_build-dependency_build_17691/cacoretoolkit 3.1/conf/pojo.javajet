<%@ jet package="gov.nih.nci.codegen.core.template.jet" 
        class="Pojo"
        skeleton="BeanSkel.skeleton" %>

<%
Classifier klass = (Classifier)context.get("modelElement");
System.out.println("Processing class: " + klass.getName());
String basePkg = (String)context.get("basePackage");
String basePkg1 = null;
String isAbstract = new String();
boolean isEnum = false;
boolean isInterface = false;

Stereotype st = UML13Utils.getStereotype(klass);
if (st!=null) {
    System.out.println("stereotype=>" + st.getName());
    if (st.getName().equalsIgnoreCase("enumeration") || st.getName().equalsIgnoreCase("CADSR Value Domain")) {
        isEnum = true;
    } else if (st.getName().equalsIgnoreCase("interface")) {
        isInterface = true;
    } else if (st.getName().equalsIgnoreCase("abstract")) {
		isAbstract="abstract";
    	System.out.println("isAbstract==>" + isAbstract);
    }
}
if (klass.isAbstract() && !isInterface) {
	isAbstract="abstract";
}
%>

package <%=UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(klass), basePkg), klass)%>.bean;
import <%=UML13Utils.getNamespaceName(UML13Utils.getPackage(UML13Utils.getModel(klass), basePkg), klass)%>.bean.*;
import java.util.*;

/**
 * <!-- LICENSE_TEXT_START -->
 * <!-- LICENSE_TEXT_END -->
 */
 
<%=UML13JavaSourceHelper.getClassJavadoc(klass)%>
public <% if (isAbstract.equals("abstract")) {%> <%=isAbstract%><%}%> <%=isEnum?"enum":(isInterface?"interface":"class")%> <%=klass.getName()%> 
<% UmlClass superClass = UML13Utils.getSuperClass(klass); %>
<% if(superClass != null){ 
System.out.println("extends clause=>" + getQualifiedBeanName(superClass, basePkg));
%>
    extends <%=getQualifiedBeanName(superClass, basePkg)%>
<% } %>

<%
    StringBuilder implClause = new StringBuilder();
    if (!isInterface) {
		for(Iterator i = UML13Utils.getInterfaces((UmlClass)klass).iterator(); i.hasNext();){
			Classifier inter = (Classifier)i.next();
			implClause.append(", " + getQualifiedBeanName(inter, basePkg));
	    }
	}
%>

<% if(!isEnum && !isInterface){ %>
	implements java.io.Serializable <%=implClause.toString()%>
<% } %>
{
    <% if(isInterface) { %>
    /* TODO:: add interface operations */
    <% } else { %>
    <% if (isEnum) {
           boolean firstEnum = true;
    %>
 	<% for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext(); firstEnum=false){ %>
	   <% Attribute att = (Attribute)i.next(); %>
       <%=UML13JavaSourceHelper.getAttributeJavadoc(att)%>
    <%=((firstEnum)?"":" ,")%> <%=att.getName()%>
    <% } %>;
    <% } else { %>

	private static final long serialVersionUID = 1234567890L;

<% if (UML13Utils.getAttributes((UmlClass)klass).size() > 0) { %>

 	<% for(Iterator i = UML13Utils.getAttributes((UmlClass)klass).iterator(); i.hasNext();){ %>
	   <% Attribute att = (Attribute)i.next(); %>
    <%=UML13JavaSourceHelper.getAttributeJavadoc(att)%>
    <%=att.getVisibility().toString().substring(3)%> <% if(getQualifiedBeanName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedBeanName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>;<%} else {%><%=getQualifiedBeanName(att.getType(), basePkg)%> <%=att.getName()%>;<%}%>
    <%=UML13JavaSourceHelper.getAttributeJavadoc(att)%>
	public <%if(getQualifiedBeanName(att.getType(), basePkg).startsWith(".")){%><%=getQualifiedBeanName(att.getType(), basePkg).substring(1)%><%} else { %> <%=getQualifiedBeanName(att.getType(),basePkg)%><%}%> get<%=capFirst(att.getName())%>(){
        return <%=att.getName()%>;
    }
    public void set<%=capFirst(att.getName())%>(<% if(getQualifiedBeanName(att.getType(), basePkg).startsWith(".")) {%><%=getQualifiedBeanName(att.getType(), basePkg).substring(1)%> <%=att.getName()%>)<%} else {%> <%=getQualifiedBeanName(att.getType(), basePkg)%> <%=att.getName()%>)<% } %>{
        this.<%=att.getName()%> = <%=att.getName()%>;
    }
	<% } %>


		public boolean equals(Object obj){
			boolean eq = false;
			if(obj instanceof <%=klass.getName() %>) {
				<%=klass.getName() %> c =(<%=klass.getName() %>)obj; 			 
				<%=getIdAtt((UmlClass)klass).getType().getName()%> thisId = getId();		
				<%if (isPrimitive(getIdAtt((UmlClass)klass).getType().getName())) {%>
				    if(thisId == c.getId()){
				       eq = true;
				    }
				 <% } else { %>
					if(thisId != null && thisId.equals(c.getId())) {
					   eq = true;
				    }		
				<% } %>
			}
			return eq;
		}
		
		public int hashCode(){
			int h = 0;
			<%if (isPrimitive(getIdAtt((UmlClass)klass).getType().getName())) {%>
			 h += (new Long(getId())).hashCode();
			<% } else { %>
			if(getId() != null) {
				h += getId().hashCode();
			}
			<% } %>
			return h;
	}
<% } %>

<% if (UML13Utils.getAssociationEnds(klass).size() > 0) {  %>
	<% for(Iterator i = UML13Utils.getAssociationEnds(klass).iterator(); i.hasNext();){%>
	   <% AssociationEnd thisEnd = (AssociationEnd)i.next(); %>
	   <% AssociationEnd otherEnd = (AssociationEnd)UML13Utils.getOtherAssociationEnd(thisEnd); %>
	   <% if(otherEnd.isNavigable()){ %>
	      <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
    <%=UML13JavaSourceHelper.getClassJavadoc(otherEnd.getType())%>
    private Set <<%=getQualifiedBeanName(otherEnd.getType(), basePkg)%>> <%=otherEnd.getName()%> = new HashSet<<%=getQualifiedBeanName(otherEnd.getType(), basePkg)%>>();
    <%=UML13JavaSourceHelper.getClassJavadoc(otherEnd.getType())%>
    public Set <<%=getQualifiedBeanName(otherEnd.getType(), basePkg)%>> get<%=capFirst(otherEnd.getName())%>(){
        return <%=otherEnd.getName()%>;
    }

	      <% } else if( UML13Utils.isMany2One(thisEnd, otherEnd) ){ %>
			
			<%
			String fullInterfaceName=getQualifiedBeanName(otherEnd.getType(), basePkg);
		    String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName;
			%>
			
			
    <%=UML13JavaSourceHelper.getClassJavadoc(otherEnd.getType())%>
    private <%=fullInterfaceName%> <%=otherEnd.getName()%>;
    <%=UML13JavaSourceHelper.getClassJavadoc(otherEnd.getType())%>
    public <%=getQualifiedBeanName(otherEnd.getType(), basePkg)%> get<%=capFirst(otherEnd.getName())%>(){
        return <%=otherEnd.getName()%>;			
    }

	      <% }else if(UML13Utils.isOne2One(thisEnd, otherEnd)){ %>
          <%
			String fullInterfaceName=getQualifiedBeanName(otherEnd.getType(), basePkg);
		        String implName=fullInterfaceName.substring(fullInterfaceName.lastIndexOf(".")+1);
			String fullBeanName = fullInterfaceName;
			%>

			
    <%=UML13JavaSourceHelper.getClassJavadoc(otherEnd.getType())%>
    private <%=fullInterfaceName%> <%=otherEnd.getName()%>;
    <%=UML13JavaSourceHelper.getClassJavadoc(otherEnd.getType())%>
    public <%=getQualifiedBeanName(otherEnd.getType(), basePkg)%> get<%=capFirst(otherEnd.getName())%>(){
        return <%=otherEnd.getName()%>;			
    }

	      <% }else{ %>
		     <% if(true) throw new RuntimeException("Unknown association multiplicity: " + thisEnd.getType().getName() + "." + thisEnd.getName() + ".upper=" + ((MultiplicityRange)thisEnd.getMultiplicity().getRange().iterator().next()).getUpper() + ", " + otherEnd.getType().getName() + "." + otherEnd.getName() + ".upper=" + ((MultiplicityRange)otherEnd.getMultiplicity().getRange().iterator().next()).getUpper()); %>
	      <% } %>
	               
	   <% if(UML13Utils.isMany2Many(thisEnd, otherEnd) || UML13Utils.isOne2Many(thisEnd, otherEnd)){ %>
    public void set<%=capFirst(otherEnd.getName())%>(Set<<%=getQualifiedBeanName(otherEnd.getType(), basePkg)%>> <%=otherEnd.getName()%>){
        this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
    }
	   <% } else if(UML13Utils.isMany2One(thisEnd, otherEnd) || UML13Utils.isOne2One(thisEnd, otherEnd)){ %>

    public void set<%=capFirst(otherEnd.getName())%>(<%=getQualifiedBeanName(otherEnd.getType(), basePkg)%> <%=otherEnd.getName()%>){
        this.<%=otherEnd.getName()%> = <%=otherEnd.getName()%>;
    }	
	   <% } %>
	   <% }else{//end if otherEnd.isNavigable() %>
	      <% if(otherEnd.getAggregation().equals(AggregationKindEnum.AK_AGGREGATE)){ %>
	   private Long <%=otherEnd.getName()%>Id;
	   public Long get<%=capFirst(otherEnd.getName())%>Id(){
	      return <%=otherEnd.getName()%>Id;
	   }
	      <% } %>
	   <% } %>
	<% } %>

<% } %>
			<% } %>
    <% } %>
}