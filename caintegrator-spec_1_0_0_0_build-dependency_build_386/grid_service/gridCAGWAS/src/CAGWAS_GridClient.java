/**
 * 
 */

/**
 * @author sahnih
 *
 */
	import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
	import java.rmi.RemoteException;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

	import javax.xml.namespace.QName;

	import org.apache.axis.EngineConfiguration;
	import org.apache.axis.client.AxisClient;
	import org.apache.axis.client.Stub;
	import org.apache.axis.configuration.FileProvider;
	import org.apache.axis.message.addressing.EndpointReferenceType;
	import org.apache.axis.types.URI.MalformedURIException;

	import org.oasis.wsrf.properties.GetResourcePropertyResponse;

	import org.globus.gsi.GlobusCredential;

	import gov.nih.nci.cagrid.cagwas.stubs.CAGWASPortType;
	import gov.nih.nci.cagrid.cagwas.stubs.service.CAGWASServiceAddressingLocator;
	import gov.nih.nci.cagrid.cagwas.common.CAGWASI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

	/**
	 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
	 *
	 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
	 * service.
	 *
	 * On construction the class instance will contact the remote service and retrieve it's security
	 * metadata description which it will use to configure the Stub specifically for each method call.
	 * 
	 * @created by Introduce Toolkit version 1.1
	 */
	public class CAGWAS_GridClient extends ServiceSecurityClient implements CAGWASI {	
		protected CAGWASPortType portType;
		private Object portTypeMutex;

		public CAGWAS_GridClient(String url) throws MalformedURIException, RemoteException {
			this(url,null);	
		}

		public CAGWAS_GridClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		   	super(url,proxy);
		   	initialize();
		}
		
		public CAGWAS_GridClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
		   	this(epr,null);
		}
		
		public CAGWAS_GridClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
		   	super(epr,proxy);
			initialize();
		}
		
		private void initialize() throws RemoteException {
		    this.portTypeMutex = new Object();
			this.portType = createPortType();
		}

		private CAGWASPortType createPortType() throws RemoteException {

			CAGWASServiceAddressingLocator locator = new CAGWASServiceAddressingLocator();
			// attempt to load our context sensitive wsdd file
			InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
			if (resourceAsStream != null) {
				// we found it, so tell axis to configure an engine to use it
				EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
				// set the engine of the locator
				locator.setEngine(new AxisClient(engineConfig));
			}
			CAGWASPortType port = null;
			try {
				port = locator.getCAGWASPortTypePort(getEndpointReference());
			} catch (Exception e) {
				throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
			}

			return port;
		}
		
		public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
			return portType.getResourceProperty(resourcePropertyQName);
		}

		public static void usage(){
			System.out.println(CAGWAS_GridClient.class.getName() + " -url <service url>");
		}
		
		public static void main(String [] args){
		    System.out.println("Running the Grid Service Client");
			try{
			if(!(args.length < 2)){
				if(args[0].equals("-url")){
				  CAGWAS_GridClient client = new CAGWAS_GridClient(args[1]);
				  client.run();
				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
			} catch (Exception e) {
				e.printStackTrace();
				System.exit(1);
			}
		}

	  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
	    synchronized(portTypeMutex){
	      configureStubSecurity((Stub)portType,"query");
	    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
	    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
	    cqlQueryContainer.setCQLQuery(cqlQuery);
	    params.setCqlQuery(cqlQueryContainer);
	    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
	    return boxedResult.getCQLQueryResultCollection();
	    }
	  }
	    public void run() throws Exception{
			Properties testcases;

	    	System.out.println("Test XML");
	    	
	    	testcases = new Properties();
	    	testcases.load(new FileInputStream("conf/testcases"));
	    	Iterator testnumbers = testcases.keySet().iterator();
	    	while (testnumbers.hasNext()){
				long startTime = System.currentTimeMillis(),endTime =0;
	    		try {
	    			String className = null;
	    			String id = null;
	    			String testname = (String)testnumbers.next();
	    			if(testname.indexOf("|")> 0){
	    					className = testname.substring(0,testname.indexOf("|"));
		    				id = testname.substring(testname.indexOf("|")+1);
	    			}else{
	    				className = testname;
	    			}
	    			
	    			System.out.println("-----------------------------------" + className + "------------------------------------");
				    gov.nih.nci.cagrid.cqlquery.CQLQuery query = new gov.nih.nci.cagrid.cqlquery.CQLQuery();
                    gov.nih.nci.cagrid.cqlquery.Object target = new gov.nih.nci.cagrid.cqlquery.Object();
                    target.setName(className);
                    gov.nih.nci.cagrid.cqlquery.Attribute att = new gov.nih.nci.cagrid.cqlquery.Attribute();
                    att.setName("id");
                    att.setValue(id);
                    att.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.EQUAL_TO);
                    target.setAttribute(att);
                    query.setTarget(target);
                    query.setTarget(target);
                    gov.nih.nci.cagrid.cqlresultset.CQLQueryResults results = query(query);

                    java.util.Iterator iter = new gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator(results,
                        CAGWAS_GridClient.class.getResourceAsStream("client-config.wsdd"));
                    if (iter.hasNext()) {
                        Object o = iter.next();
                        testAllMethods(o);
                    }
                    System.out.println("Query Complete.");	    			
                    endTime = System.currentTimeMillis();
	        		System.out.println("time = "+(endTime-startTime));
	    		}catch(Exception e) {
	    			e.printStackTrace();
	    			endTime = System.currentTimeMillis();
	        		System.out.println("time = "+(endTime-startTime));
	    			continue;
	    		}
	    		
	        }
	    }
	    public void testAllMethods(Object object) {
	    	try {
				Class domainObject = object.getClass();
				Method[] allMethods = domainObject.getMethods();
				for(int i=0; i<allMethods.length;i++) {
			    	try {
			    		String methodString = allMethods[i].getName();			    		
			    		if (methodString.substring(0,3).equals("get")) {
			    			Class returntype = allMethods[i].getReturnType();
			    			if (methodString.equals("getBigid")) {
			    				System.out.println("=====result of big id ===== for class" + object.getClass().getName());
			    			}
			    			if(returntype.getName().substring(0,10).equals("java.lang.")){
			    				System.out.println("testing method:" + methodString);
			    				System.out.println("[result of method: " + methodString + "] " + allMethods[i].invoke(object));
			    			}
			    			
			    		}
			    	}catch(Exception e) {
			    		e.printStackTrace();
			    		continue;
					}
				}
			}catch(Exception e) {
	    		e.printStackTrace();
			}
	    }
	}